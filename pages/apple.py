import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import yfinance as yf
from  datetime import datetime

st.set_page_config(page_title='–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ Apple',page_icon='üçè',layout='wide')


if st.button('‚Üê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'):
    st.switch_page("home.py")

@st.cache_data
def load_data(ticker, start_date, end_date):
    data = yf.Ticker(ticker)
    return data.history(period='1d', start=start_date, end=end_date)

with st.sidebar:
    st.image("https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg",width=100)
    st.markdown("[–°–∞–π—Ç Apple](https://www.apple.com)", unsafe_allow_html=True)
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=datetime(2010, 1, 1))
    with col2:
        end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=datetime.today())
    st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
    show_raw_data = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    #chart_theme = st.selectbox("–¢–µ–º–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤", ["light", "dark"])

st.title('–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ Apple')
st.markdown('''–°–∞–π—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏ Apple''')
         
try:
    df = load_data('AAPL', start_date, end_date)
# tickerSymbol = 'AAPL'
    st.subheader('–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')
    col1, col2, col3 = st.columns(3)
    col1.metric('–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞', f"${df['Close'].iloc[-1]:.2f}",
                f"{df['Close'].iloc[-1] - df['Close'].iloc[-2]:.2f}")
    col2.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"${df['High'].max():.2f}",
                f"–î–∞—Ç–∞: {df['High'].idxmax().strftime('%Y-%m-%d')}")
    col3.metric("–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º", f"{df['Volume'].mean():,.0f} –∞–∫—Ü–∏–π")
# tickerData = yf.Ticker(tickerSymbol)
    st.subheader('–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è')
    st.line_chart(df['Close'], use_container_width=True)

    st.subheader('–û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤')
    st.area_chart(df['Volume'], use_container_width=True)

    st.subheader('–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å')
    df['Daily Return'] = df['Close'].pct_change()

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))
    sns.histplot(df['Daily Return'].dropna(), bins=100, color='blue', ax=ax1)
    ax1.set_title('–†–∞–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π')

    sns.boxplot(x=df['Daily Return'].dropna(),ax=ax2)
    ax2.set_title('Boxplot –¥–Ω–µ–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    st.pyplot(fig)

    if show_raw_data:
        st.subheader('–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')
        st.dataframe(df.sort_index(ascending=False).style.format({
            'Open': '{:.2f}',
            'High': '{:.2f}',
            'Low': '{:.2f}',
            'Close':'{:.2f}',
            'Volume':'{:,}'
        }), use_container_width=True)

except Exception as e:
    st.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}')
    st.info('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É')

st.markdown('---')





